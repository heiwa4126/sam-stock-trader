# もとの JSONを `yq -y . stock_trader.asl.json` で変換してコメント入れたもの。
# JSONより読みやすい
#
Comment: A state machine that does mock stock trading.
StartAt: Check Stock Value
States:
  #----
  Check Stock Value:
    Type: Task
    Resource: ${StockCheckerFunctionArn}
    Retry:
      - ErrorEquals:
          - States.TaskFailed   # States.Timeout 以外のあらゆる既知のエラー名に一致するワイルドカード
        IntervalSeconds: 15     # 15秒待ってリトライ。最初の再試行前の秒数を表す整数 (デフォルトで 1)
        MaxAttempts: 5          # 再試行の最大回数を表す正の整数 (デフォルトでは 3)
        BackoffRate: 1.5        # 各試行間で再試行間隔が増加する乗数 (デフォルトでは 2.0)
    Next: Buy or Sell?
  #----
  Buy or Sell?:
    Type: Choice
    Choices:                    # switch文みたいなやつ。ここでは条件が1個しかないのでif-then-else
      - Variable: $.stock_price
        NumericLessThanEquals: 50 # if stock_price <= 50
        Next: Buy Stock           # goto "Buy Stock"
    Default: Sell Stock         # switch文のdefaultみたいなやつ
  #----
  Sell Stock:
    Type: Task
    Resource: ${StockSellerFunctionArn}
    Retry:
      - ErrorEquals:
          - States.TaskFailed
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 1
    Next: Record Transaction
  #----
  Buy Stock:
    Type: Task
    Resource: ${StockBuyerFunctionArn}
    Retry:
      - ErrorEquals:
          - States.TaskFailed
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 1
    Next: Record Transaction
  #----
  Record Transaction:
    Type: Task
    Resource: ${DDBPutItem}
    # DynamoDBに対する最適化統合。lambdaなしにtableに書き込める
    # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html
    Parameters:
      TableName: ${DDBTable}
      Item:
        Id:
          S.$: $.id
          # '.$'と'$.'についてはREADME参照
        Type:
          S.$: $.type
        Price:
          N.$: $.price
        Quantity:
          N.$: $.qty
        Timestamp:
          S.$: $.timestamp
    Retry:
      - ErrorEquals:
          - States.TaskFailed
        IntervalSeconds: 20
        MaxAttempts: 5
        BackoffRate: 10
    End: true
