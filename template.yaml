AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-stock-trader

  Sample SAM Template for sam-stock-trader

Globals:
  Function:
    Timeout: 3
    Runtime: python3.9
    Architectures:
      - x86_64
  Api:
    OpenApiVersion: 3.0.3

Resources:
  StockTradingStateMachine:
    Type: AWS::Serverless::StateMachine
    # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/stock_trader.asl.json
      DefinitionSubstitutions:
        StockCheckerFunctionArn: !GetAtt StockCheckerFunction.Arn
        StockSellerFunctionArn: !GetAtt StockSellerFunction.Arn
        StockBuyerFunctionArn: !GetAtt StockBuyerFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref TransactionTable
      Events:
        HourlyTradingSchedule:
          Type: Schedule
          # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the stock trading state machine every hour
            Enabled: False # This schedule is disabled by default to avoid incurring charges.
            Schedule: "rate(1 hour)"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref StockCheckerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockSellerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockBuyerFunction
        - DynamoDBWritePolicy:
            TableName: !Ref TransactionTable
        - Statement:
           - Effect: Allow
             Action:
               - logs:CreateLogDelivery
               - logs:GetLogDelivery
               - logs:UpdateLogDelivery
               - logs:DeleteLogDelivery
               - logs:ListLogDeliveries
               - logs:PutResourcePolicy
               - logs:DescribeResourcePolicies
               - logs:DescribeLogGroups
             Resource: "*"
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StockTradingStateMachineLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR

  StockTradingStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub
        - "/aws/vendedlogs/states/${AWS::StackName}-StockTradingStateMachine-${v1}-Log"
        - {v1: !Select [4, !Split ["-", !Select [2, !Split [/, !Ref AWS::StackId ]]]]}

  StockCheckerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock_checker/
      Handler: app.lambda_handler

  StockSellerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock_seller/
      Handler: app.lambda_handler

  StockBuyerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock_buyer/
      Handler: app.lambda_handler

  StockCheckerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: StockCheckerFunction
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/aws/lambda/${StockCheckerFunction}"

  StockSellerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: StockSellerFunction
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/aws/lambda/${StockSellerFunction}"

  StockBuyerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: StockBuyerFunction
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/aws/lambda/${StockBuyerFunction}"

  TransactionTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  # StockTradingStateMachineHourlyTradingSchedule is an implicit Schedule event rule created out of Events key under Serverless::StateMachine
  # Find out more about other implicit resources you can reference within SAM
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
  StockTradingStateMachineArn:
    Description: "Stock Trading State machine ARN"
    Value: !Ref StockTradingStateMachine
  StockTradingStateMachineRoleArn:
    Description: "IAM Role created for Stock Trading State machine based on the specified SAM Policy Templates"
    Value: !GetAtt StockTradingStateMachineRole.Arn
